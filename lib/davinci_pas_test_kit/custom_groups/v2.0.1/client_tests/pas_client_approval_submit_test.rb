require_relative '../../../urls'
require_relative '../../../user_input_response'

module DaVinciPASTestKit
  module DaVinciPASV201
    class PASClientApprovalSubmitTest < Inferno::Test
      include URLs
      include UserInputResponse

      id :pas_client_v201_approval_submit_test
      title 'Client submits a claim using the $submit operation'
      description %(
        Inferno will wait for a prior authorization submission request
        from the client. Upon receipt, Inferno will generate and send a
        response with an approved status.
      )
      input :access_token,
            title: 'Access Token',
            description: %(
              Access token that the client will provide in the Authorization header of each request
              made during this test.
            )
      input :approval_json_response,
            title: 'Claim approved response JSON',
            type: 'textarea',
            optional: true,
            description: %(
              If provided, this JSON will be sent in response to $submit requests during this test
              to indicate that the request has been approved.
              It will be updated to make creation timestamps current.
              If not provided, an approval response will be generated from the submitted Claim.
              In either case, the response will be validated against the PAS Response Bundle profile.
            )
      submit_respond_with :approval_json_response

      run do
        wait(
          identifier: access_token,
          message: %(
            **Approval Workflow Test**:

            Submit a PAS request to

            `#{submit_url}`

            The request must have an `Authorization` header with the value `Bearer #{access_token}`.

            If the optional '**#{input_title(:approval_json_response)}**' input is populated, it will
            be returned, updated with current timestamps. Otherwise, an approval response will
            be generated by Inferno using the received Claim.
          )
        )
      end
    end
  end
end
