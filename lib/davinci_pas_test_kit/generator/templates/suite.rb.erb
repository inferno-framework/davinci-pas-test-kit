require_relative '../../validator_suppressions'
require_relative '<%= error_group_file_name %>'
require_relative '../../version'
<% group_file_list.each do |file_name| %>require_relative '<%= file_name %>'
<% end %>
module DaVinciPASTestKit
  module <%= module_name %>
    class <%= class_name %> < Inferno::TestSuite
      id :<%= suite_id %>
      title '<%= title %>'
      version DaVinciPASTestKit::VERSION
      description File.read(File.join(__dir__, '..', '..', 'docs', 'server_suite_description_<%= ig_metadata.reformatted_version %>.md'))

      links [
        {
          label: 'Report Issue',
          url: 'https://github.com/inferno-framework/davinci-pas-test-kit/issues/'
        },
        {
          label: 'Open Source',
          url: 'https://github.com/inferno-framework/davinci-pas-test-kit/'
        },
        {
          label: 'Implementation Guide',
          url: '<%= ig_link %>'
        }
      ]

      resume_test_route :get, '/resume_after_notification' do |request|
        request.query_parameters['token']
      end

      fhir_resource_validator do
        igs '<%= ig_identifier %>'

        exclude_message do |message|
          # Messages expected of the form `<ResourceType>: <FHIRPath>: <message>`
          # We strip `<ResourceType>: <FHIRPath>: ` for the sake of matching
          SUPPRESSED_MESSAGES.match?(message.message.sub(/\A\S+: \S+: /, '')) ||
            message.message.downcase.include?('x12')
        end
      end

      input :server_endpoint,
            title: 'FHIR Server Endpoint URL',
            description: 'Insert the FHIR server endpoint URL for PAS'

      input :smart_credentials,
            title: 'OAuth Credentials',
            type: :auth_info,
            options: {
              mode: 'access'
            },
            optional: true

      fhir_client do
        url :server_endpoint
        auth_info :smart_credentials
      end

      # Used for attestation experiment - see pas_claim_response_decision_test.rb
      # resume_test_route :get, RESUME_PASS_PATH do |request|
      #   request.query_parameters['token']
      # end
      #
      # resume_test_route :get, RESUME_FAIL_PATH, result: 'fail' do |request|
      #   request.query_parameters['token']
      # end

      group 'Demonstrate Workflow Support' do
        description %(
          The workflow tests validate that the server can participate in complete
          end-to-end prior authorization interactions, returning responses that are
          conformant and also contain the correct codes.
        )
        <% group_id_list.each do |id| %>
        group from: :<%= id %><% end %>
      end
      group from: :<%= must_support_group_id %>
      group from: :<%= error_group_id %>
    end
  end
end
